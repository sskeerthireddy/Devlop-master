apply plugin: 'maven'

def localReleaseDest = "${buildDir}/release/${project.versionNumber}"

def isAndroidProject() {
	def plugins = project.getPlugins()

	return plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')
}

task zipRelease(type: Zip) {
	from localReleaseDest
	destinationDir buildDir
	archiveName "release-${versionNumber}.zip"
}

task buildRelease(dependsOn: ['uploadArchives', 'zipRelease']) {
	println "Release ${versionNumber} can be found at ${localReleaseDest}/"
	println "Release ${versionNumber} zipped can be found ${buildDir}/release-${versionNumber}.zip"
}

afterEvaluate { project ->
	uploadArchives {
		repositories {
			mavenDeployer {
				repository(url: "file://${localReleaseDest}")

				pom.groupId = project.groupId
				pom.artifactId = project.artifactId + POM_ARTIFACT_ID_SUFFIX
				pom.version = project.versionNumber

				pom.project {
					name POM_NAME
					packaging POM_PACKAGING
					description POM_DESCRIPTION
					url 'https://github.com/MatthewTamlin/AndroidUtilities'

					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
						}
					}

					developers {
						developer {
							id 'MatthewTamlin'
							name 'Matthew Tamlin'
							email 'matthew.tamlin@icloud.com'
						}
					}

					scm {
						url 'https://github.com/MatthewTamlin/AndroidUtilities'
					}
				}
			}
		}
	}

	if (isAndroidProject()) {
		task install(type: Upload, dependsOn: assemble) {
			repositories.mavenInstaller {
				configuration = configurations.archives

				pom.groupId = project.groupId
				pom.artifactId = project.artifactId + POM_ARTIFACT_ID_SUFFIX
				pom.version = project.versionNumber

				pom.project {
					name POM_NAME
					packaging POM_PACKAGING
					description POM_DESCRIPTION
					url 'https://github.com/MatthewTamlin/AndroidUtilities'

					licenses {
						license {
							name 'Apache License, Version 2.0'
							url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
						}
					}

					developers {
						developer {
							id 'MatthewTamlin'
							name 'Matthew Tamlin'
							email 'matthew.tamlin@icloud.com'
						}
					}

					scm {
						url 'https://github.com/MatthewTamlin/AndroidUtilities'
					}
				}
			}
		}

		task androidJavadocs(type: Javadoc) {
			source = android.sourceSets.main.java.source
			classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
		}

		task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
			classifier = 'javadoc'
			from androidJavadocs.destinationDir
		}

		task androidSourcesJar(type: Jar) {
			classifier = 'sources'
			from android.sourceSets.main.java.source
		}
	} else {
		install {
			repositories.mavenInstaller {
				pom.groupId = project.groupId
				pom.artifactId = project.artifactId + POM_ARTIFACT_ID_SUFFIX
				pom.version = project.versionNumber

				pom.project {
					name POM_NAME
					packaging POM_PACKAGING
					description POM_DESCRIPTION
					url 'https://github.com/MatthewTamlin/AndroidUtilities'

					licenses {
						license {
							name 'Apache License, Version 2.0'
							url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
						}
					}

					developers {
						developer {
							id 'MatthewTamlin'
							name 'Matthew Tamlin'
							email 'matthew.tamlin@icloud.com'
						}
					}

					scm {
						url 'https://github.com/MatthewTamlin/AndroidUtilities'
					}
				}
			}
		}

		task sourcesJar(type: Jar, dependsOn: classes) {
			classifier = 'sources'
			from sourceSets.main.allSource
		}

		task javadocJar(type: Jar, dependsOn: javadoc) {
			classifier = 'javadoc'
			from javadoc.destinationDir
		}
	}

	if (JavaVersion.current().isJava8Compatible()) {
		allprojects {
			tasks.withType(Javadoc) {
				options.addStringOption('Xdoclint:none', '-quiet')
			}
		}
	}

	artifacts {
		if (isAndroidProject()) {
			archives androidSourcesJar
			archives androidJavadocsJar
		} else {
			archives sourcesJar
			archives javadocJar
		}
	}
}